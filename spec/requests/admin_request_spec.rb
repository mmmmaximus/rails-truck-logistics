require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

describe "/admins" do
  let(:admin) { create(:admin) }

  before do
    allow_any_instance_of(ActionDispatch::Request).to receive(:session).and_return(admin_id: admin.id)
  end

  describe "GET /index" do
    it "renders a successful response" do
      get admins_path
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_admin_path
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    let(:admin) { create(:admin) }

    it "render a successful response" do
      get edit_admin_path(admin)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      let(:valid_attributes) do
        { email: 'valid_email@email.com', password: 'password' }
      end

      it "creates a new Admin and redirect to index" do
        expect {
          post admins_path, params: { admin: valid_attributes }
        }.to change(Admin, :count).by(1)
        expect(response).to redirect_to admins_path
      end
    end

    context "with invalid parameters" do
      let(:invalid_attributes) do
        { email: 'invalid_email', password: 'pass' }
      end

      it "does not create a new Admin and renders successful response" do
        expect {
          post admins_path, params: { admin: invalid_attributes }
        }.to change(Admin, :count).by(0)
        expect(response).to be_successful
      end
    end
  end

  describe "PATCH /update" do
    let!(:existing_admin) { create(:admin) }
    let(:valid_attributes) do
      { email: 'valid_email@email.com', password: 'password' }
    end
    let(:invalid_attributes) do
      { email: 'invalid_email', password: 'pass' }
    end

    it "updates the requested admin with valid attributes" do
      patch admin_path(existing_admin), params: { admin: valid_attributes }

      existing_admin.reload
      expect(existing_admin.email).to eq(valid_attributes[:email])
      expect(response).to redirect_to admins_path
   end

    it "fails to update the admin and renders edit again" do
      patch admin_path(existing_admin), params: { admin: invalid_attributes }

      expect(existing_admin.email).to_not eq(invalid_attributes[:email])
      expect(response).to_not render_template(:index)
      expect(response).to render_template(:edit)
      expect(response).to be_successful
    end
  end

  describe "DELETE /destroy" do
    let!(:existing_admin) { create(:admin) }

    it "destroys the requested admin and redirects to index" do
      expect {
        delete admin_path(existing_admin)
      }.to change(Admin, :count).by(-1)
      expect(response).to redirect_to(admins_path)
    end
  end
end
